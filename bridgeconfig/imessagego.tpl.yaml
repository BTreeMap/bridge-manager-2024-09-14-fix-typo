# Homeserver details.
homeserver:
    # The address that this appservice can use to connect to the homeserver.
    address: {{ .HungryAddress }}
    # The domain of the homeserver (also known as server_name, used for MXIDs, etc).
    domain: beeper.local

    # What software is the homeserver running?
    # Standard Matrix homeservers like Synapse, Dendrite and Conduit should just use "standard" here.
    software: hungry
    # The URL to push real-time bridge status to.
    # If set, the bridge will make POST requests to this URL whenever a user's discord connection state changes.
    # The bridge will use the appservice as_token to authorize requests.
    status_endpoint: null
    # Endpoint for reporting per-message status.
    message_send_checkpoint_endpoint: null
    # Does the homeserver support https://github.com/matrix-org/matrix-spec-proposals/pull/2246?
    async_media: true

    # Should the bridge use a websocket for connecting to the homeserver?
    # The server side is currently not documented anywhere and is only implemented by mautrix-wsproxy,
    # mautrix-asmux (deprecated), and hungryserv (proprietary).
    websocket: {{ .Websocket }}
    # How often should the websocket be pinged? Pinging will be disabled if this is zero.
    ping_interval_seconds: 180

# Application service host/registration related details.
# Changing these values requires regeneration of the registration.
appservice:
    # The address that the homeserver can use to connect to this appservice.
    address: null

    # The hostname and port where this appservice should listen.
    hostname: {{ if .Websocket }}null{{ else }}{{ .ListenAddr }}{{ end }}
    port: {{ if .Websocket }}null{{ else }}{{ .ListenPort }}{{ end }}

    # Database config.
    database:
        # The database type. Only "sqlite3-fk-wal" is supported.
        type: sqlite3-fk-wal
        # SQLite database path. A raw file path is supported, but `file:<path>?_txlock=immediate` is recommended.
        uri: file:{{.DatabasePrefix}}beeper-imessage.db?_txlock=immediate

    # The unique ID of this appservice.
    id: {{ .AppserviceID }}
    # Appservice bot details.
    bot:
        # Username of the appservice bot.
        username: {{ .BridgeName }}bot
        # Display name and avatar for bot. Set to "remove" to remove display name/avatar, leave empty
        # to leave display name/avatar as-is.
        displayname: iMessage bridge bot
        avatar: mxc://maunium.net/tManJEpANASZvDVzvRvhILdX

    # Whether or not to receive ephemeral events via appservice transactions.
    # Requires MSC2409 support (i.e. Synapse 1.22+).
    # You should disable bridge -> sync_with_custom_puppets when this is enabled.
    ephemeral_events: true

    # Authentication tokens for AS <-> HS communication. Autogenerated; do not modify.
    as_token: {{ .ASToken }}
    hs_token: {{ .HSToken }}

# Segment-compatible analytics endpoint for tracking some events, like provisioning API login and encryption errors.
analytics:
    # Hostname of the tracking server. The path is hardcoded to /v1/track
    host: api.segment.io
    # API key to send with tracking requests. Tracking is disabled if this is null.
    token: null
    # Optional user ID for tracking events. If null, defaults to using Matrix user ID.
    user_id: null

# Bridge config
bridge:
    # Localpart template of MXIDs for iMessage users.
    username_template: {{ .BridgeName }}_{{ "{{.}}" }}
    # Displayname template for iMessage users.
    displayname_template: "{{ "{{.}}" }}"
    # Should the bridge create a space and add bridged rooms to it?
    personal_filtering_spaces: false

    # Whether or not the bridge should send a read receipt from the bridge bot when a message has been
    # sent to iMessage.
    delivery_receipts: false
    # Whether or not the bridge should send the message status as a custom
    # com.beeper.message_send_status event.
    message_status_events: true
    # Whether or not the bridge should send error notices via m.notice events
    # when a message fails to bridge.
    send_error_notices: false
    # The maximum number of seconds between the message arriving at the
    # homeserver and the bridge attempting to send the message. This can help
    # prevent messages from being bridged a long time after arriving at the
    # homeserver which could cause confusion in the chat history on the remote
    # network. Set to 0 to disable.
    max_handle_seconds: 0
    # Whether or not to update the m.direct account data event when double puppeting is enabled.
    # Note that updating the m.direct event is not atomic (except with mautrix-asmux)
    # and is therefore prone to race conditions.
    sync_direct_chat_list: false
    # Servers to always allow double puppeting from
    double_puppet_server_map:
        {{ .BeeperDomain }}: {{ .HungryAddress }}
    # Allow using double puppeting from any server with a valid client .well-known file.
    double_puppet_allow_discovery: false
    # Shared secrets for https://github.com/devture/matrix-synapse-shared-secret-auth
    #
    # If set, double puppeting will be enabled automatically for local users
    # instead of users having to find an access token and run `login-matrix`
    # manually.
    login_shared_secret_map:
        {{ .BeeperDomain }}: "as_token:{{ .ASToken }}"

    # A URL to fetch validation data from. Use this option or the nac_plist option
    nac_validation_data_url: {{ .Params.nac_url }}
    # Optional auth token to use when fetching validation data. If null, defaults to passing the as_token.
    nac_validation_data_token: {{ .Params.nac_token }}
    nac_validation_is_relay: true

    # Backfill settings
    backfill:
        # Should backfilling be enabled at all?
        enable: true
        # Maximum number of messages to backfill for new portal rooms.
        initial_limit: 100
        # Maximum age of chats to sync in days.
        initial_sync_max_age: 0.5
        # If a backfilled chat is older than this number of hours, mark it as read even if it's unread on iMessage.
        # Set to -1 to let any chat be unread.
        unread_hours_threshold: 720

        #########################################################################
        # The settings below are only applicable if you are:                    #
        #                                                                       #
        # 1. Using batch sending, which is no longer supported in Synapse.      #
        # 2. Running the bridge in backfill-only mode connecting to another     #
        #    instance for portal creation via websocket commands.               #
        #                                                                       #
        # In other words, unless you are Beeper, the rest of the backfill       #
        # section very likely does not apply to you.                            #
        #########################################################################
        # Is this bridge only meant for backfilling chats?
        only_backfill: false

        # Settings for immediate backfills. These backfills should generally be small and their main purpose is
        # to populate each of the initial chats (as configured by max_initial_conversations) with a few messages
        # so that you can continue conversations without losing context.
        immediate:
            # The maximum number of events to backfill initially.
            max_events: 25
        # Settings for deferred backfills. The purpose of these backfills are to fill in the rest of
        # the chat history that was not covered by the immediate backfills.
        # These backfills generally should happen at a slower pace so as not to overload the homeserver.
        # Each deferred backfill config should define a "stage" of backfill (i.e. the last week of messages).
        # The fields are as follows:
        # - start_days_ago: the number of days ago to start backfilling from.
        #     To indicate the start of time, use -1. For example, for a week ago, use 7.
        # - max_batch_events: the number of events to send per batch.
        # - batch_delay: the number of seconds to wait before backfilling each batch.
        deferred:
            # Last Week
            - start_days_ago: 7
              max_batch_events: 50
              batch_delay: 5
            # Last Month
            - start_days_ago: 30
              max_batch_events: 100
              batch_delay: 10
            # Last 3 months
            - start_days_ago: 90
              max_batch_events: 250
              batch_delay: 10
            # The start of time
            - start_days_ago: -1
              max_batch_events: 500
              batch_delay: 10

    # Media viewer settings. See https://gitlab.com/beeper/media-viewer for more info.
    # Used to send media viewer links instead of full files for attachments that are too big for MMS.
    media_viewer:
        # The address to the media viewer. If null, media viewer links will not be used.
        url: null
        # The homeserver domain to pass to the media viewer to use for downloading media.
        # If null, will use the server name configured in the homeserver section.
        homeserver: null
        # The minimum number of bytes in a file before the bridge switches to using the media viewer when sending MMS.
        # Note that for unencrypted files, this will use a direct link to the homeserver rather than the media viewer.
        sms_min_size: 409600
        # Same as above, but for iMessages.
        imessage_min_size: 52428800
        # Template text when inserting media viewer URLs.
        # %s is replaced with the actual URL.
        template: "Full size attachment: %s"
    # Should we convert heif images to jpeg before re-uploading? This increases
    # compatibility, but adds generation loss (reduces quality).
    convert_heif: true
    # Should we convert tiff images to jpeg before re-uploading? This increases
    # compatibility, but adds generation loss (reduces quality).
    convert_tiff: true
    # Modern Apple devices tend to use h265 encoding for video, which is a licensed standard and therefore not
    # supported by most major browsers. If enabled, all video attachments will be converted according to the
    # ffmpeg args.
    convert_video:
        enabled: false
        # Convert to h264 format (supported by all major browsers) at decent quality while retaining original
        # audio. Modify these args to do whatever encoding/quality you want.
        ffmpeg_args: ["-c:v", "libx264", "-preset", "faster", "-crf", "22", "-c:a", "copy"]
        extension: "mp4"
        mime_type: "video/mp4"
    # The prefix for commands.
    command_prefix: "!im"
    # Whether or not created rooms should have federation enabled.
    # If false, created portal rooms will never be federated.
    federate_rooms: false
    # Send captions in the same message as images using MSC2530?
    # This is currently not supported in most clients.
    caption_in_message: false
    # Whether to explicitly set the avatar and room name for private chat portal rooms.
    # If set to `default`, this will be enabled in encrypted rooms and disabled in unencrypted rooms.
    # If set to `always`, all DM rooms will have explicit names and avatars set.
    # If set to `never`, DM rooms will never have names and avatars set.
    private_chat_portal_meta: never

    # End-to-bridge encryption support options.
    # See https://docs.mau.fi/bridges/general/end-to-bridge-encryption.html
    encryption:
        # Allow encryption, work in group chat rooms with e2ee enabled
        allow: true
        # Default to encryption, force-enable encryption in all portals the bridge creates
        # This will cause the bridge bot to be in private chats for the encryption to work properly.
        default: true
        # Whether or not to use MSC2409/MSC3202 instead of /sync long polling for receiving encryption-related data.
        appservice: true
        # Require encryption, drop any unencrypted messages.
        require: true
        # Enable key sharing? If enabled, key requests for rooms where users are in will be fulfilled.
        # You must use a client that supports requesting keys from other users to use this feature.
        allow_key_sharing: true
        # Options for deleting megolm sessions from the bridge.
        delete_keys:
            # Beeper-specific: delete outbound sessions when hungryserv confirms
            # that the user has uploaded the key to key backup.
            delete_outbound_on_ack: true
            # Don't store outbound sessions in the inbound table.
            dont_store_outbound: false
            # Ratchet megolm sessions forward after decrypting messages.
            ratchet_on_decrypt: true
            # Delete fully used keys (index >= max_messages) after decrypting messages.
            delete_fully_used_on_decrypt: true
            # Delete previous megolm sessions from same device when receiving a new one.
            delete_prev_on_new_session: true
            # Delete megolm sessions received from a device when the device is deleted.
            delete_on_device_delete: true
            # Periodically delete megolm sessions when 2x max_age has passed since receiving the session.
            periodically_delete_expired: true
        # What level of device verification should be required from users?
        #
        # Valid levels:
        #   unverified - Send keys to all device in the room.
        #   cross-signed-untrusted - Require valid cross-signing, but trust all cross-signing keys.
        #   cross-signed-tofu - Require valid cross-signing, trust cross-signing keys on first use (and reject changes).
        #   cross-signed-verified - Require valid cross-signing, plus a valid user signature from the bridge bot.
        #                           Note that creating user signatures from the bridge bot is not currently possible.
        #   verified - Require manual per-device verification
        #              (currently only possible by modifying the `trust` column in the `crypto_device` database table).
        verification_levels:
            # Minimum level for which the bridge should send keys to when bridging messages from iMessage to Matrix.
            receive: cross-signed-tofu
            # Minimum level that the bridge should accept for incoming Matrix messages.
            send: cross-signed-tofu
            # Minimum level that the bridge should require for accepting key requests.
            share: cross-signed-tofu
        # Options for Megolm room key rotation. These options allow you to
        # configure the m.room.encryption event content. See:
        # https://spec.matrix.org/v1.3/client-server-api/#mroomencryption for
        # more information about that event.
        rotation:
            # Enable custom Megolm room key rotation settings. Note that these
            # settings will only apply to rooms created after this option is
            # set.
            enable_custom: true
            # The maximum number of milliseconds a session should be used
            # before changing it. The Matrix spec recommends 604800000 (a week)
            # as the default.
            milliseconds: 2592000000
            # The maximum number of messages that should be sent with a given a
            # session before changing it. The Matrix spec recommends 100 as the
            # default.
            messages: 10000

            # Disable rotating keys when a user's devices change?
            # You should not enable this option unless you understand all the implications.
            disable_device_change_key_rotation: true

    # Settings for provisioning API
    provisioning:
        # Prefix for the provisioning API paths.
        prefix: /_matrix/provision
        # Shared secret for authentication. If set to "generate", a random secret will be generated,
        # or if set to "disable", the provisioning API will be disabled.
        shared_secret: {{ .ProvisioningSecret }}

    # Settings for relay mode
    relay:
        # Whether relay mode should be allowed.
        enabled: false
        # A list of user IDs and server names who are allowed to be relayed through this bridge. Use * to allow everyone.
        whitelist: []

# Logging config. See https://github.com/tulir/zeroconfig for details.
logging:
    min_level: debug
    writers:
    - type: stdout
      format: pretty-colored
    - type: file
      format: json
      filename: ./logs/beeper-imessage.log
      max_size: 100
      max_backups: 10
      compress: false
